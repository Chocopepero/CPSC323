Token: Separator           Lexeme:   $$
Token: Keyword             Lexeme:   function
Token: Identifier          Lexeme:   convertx
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   fahr
Token: Keyword             Lexeme:   integer
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   return
Token: Integer             Lexeme:   5
Token: Operand             Lexeme:   *
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   fahr
Token: Operand             Lexeme:   -
Token: Integer             Lexeme:   32
Token: Separator           Lexeme:   )
Token: Operand             Lexeme:   /
Token: Integer             Lexeme:   9
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Separator           Lexeme:   $$
Token: Keyword             Lexeme:   integer
Token: Identifier          Lexeme:   low
Token: Separator           Lexeme:   ,
Token: Identifier          Lexeme:   high
Token: Separator           Lexeme:   ,
Token: Identifier          Lexeme:   step
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   $$
Token: Keyword             Lexeme:   scan
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   low
Token: Separator           Lexeme:   ,
Token: Identifier          Lexeme:   high
Token: Separator           Lexeme:   ,
Token: Identifier          Lexeme:   step
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Keyword             Lexeme:   while
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   low
Token: Operand             Lexeme:   <=
Token: Operand             Lexeme:   =
Token: Identifier          Lexeme:   high
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   print
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   low
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Keyword             Lexeme:   print
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   convertx
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   low
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Identifier          Lexeme:   low
Token: Operand             Lexeme:   =
Token: Identifier          Lexeme:   low
Token: Operand             Lexeme:   +
Token: Identifier          Lexeme:   step
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   endwhile
