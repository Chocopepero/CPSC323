Token: Separator           Lexeme:   $$
Token: Keyword             Lexeme:   function
Token: Identifier          Lexeme:   factorial
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   n
Token: Keyword             Lexeme:   integer
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   if
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   n
Token: Operand             Lexeme:   ==
Token: Operand             Lexeme:   =
Token: Integer             Lexeme:   0
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   return
Token: Integer             Lexeme:   1
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   else
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   return
Token: Identifier          Lexeme:   n
Token: Operand             Lexeme:   *
Token: Identifier          Lexeme:   factorial
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   n
Token: Operand             Lexeme:   -
Token: Integer             Lexeme:   1
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   endif
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   function
Token: Identifier          Lexeme:   isPrime
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   n
Token: Keyword             Lexeme:   integer
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   if
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   n
Token: Operand             Lexeme:   <
Token: Integer             Lexeme:   2
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   return
Token: Identifier          Lexeme:   false
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   else
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   integer
Token: Identifier          Lexeme:   i
Token: Separator           Lexeme:   ;
Token: Identifier          Lexeme:   i
Token: Operand             Lexeme:   =
Token: Integer             Lexeme:   2
Token: Separator           Lexeme:   ;
Token: Keyword             Lexeme:   while
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   i
Token: Operand             Lexeme:   <
Token: Identifier          Lexeme:   n
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   if
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   n
Token: Operand             Lexeme:   ==
Token: Operand             Lexeme:   =
Token: Identifier          Lexeme:   i
Token: Operand             Lexeme:   *
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   n
Token: Operand             Lexeme:   /
Token: Identifier          Lexeme:   i
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   return
Token: Identifier          Lexeme:   false
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   else
Token: Separator           Lexeme:   {
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   endif
Token: Identifier          Lexeme:   i
Token: Operand             Lexeme:   =
Token: Identifier          Lexeme:   i
Token: Operand             Lexeme:   +
Token: Integer             Lexeme:   1
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   endwhile
Token: Keyword             Lexeme:   return
Token: Identifier          Lexeme:   true
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   endif
Token: Separator           Lexeme:   }
Token: Separator           Lexeme:   $$
Token: Keyword             Lexeme:   integer
Token: Identifier          Lexeme:   num
Token: Separator           Lexeme:   ,
Token: Identifier          Lexeme:   fact
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   $$
Token: Keyword             Lexeme:   scan
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   num
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Keyword             Lexeme:   if
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   num
Token: Operand             Lexeme:   >=
Token: Operand             Lexeme:   =
Token: Integer             Lexeme:   0
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Identifier          Lexeme:   fact
Token: Operand             Lexeme:   =
Token: Identifier          Lexeme:   factorial
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   num
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Keyword             Lexeme:   print
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   fact
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Keyword             Lexeme:   if
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   isPrime
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   num
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   print
Token: Separator           Lexeme:   (
Token: Identifier          Lexeme:   num
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   else
Token: Separator           Lexeme:   {
Token: Keyword             Lexeme:   print
Token: Separator           Lexeme:   (
Token: Integer             Lexeme:   0
Token: Separator           Lexeme:   )
Token: Separator           Lexeme:   ;
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   endif
Token: Separator           Lexeme:   }
Token: Keyword             Lexeme:   endif
Token: Separator           Lexeme:   $$
